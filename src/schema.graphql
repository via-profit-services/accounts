extend type Query {
  accounts: AccountsQuery!
}

extend type Mutation {
  accounts: AccountsMutation!
}

interface Profile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  deleted: Boolean!
}

type Account implements Node {
  id: ID!
  login: String!
  password: String!
  status: AccountStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [String!]!
  deleted: Boolean!
}

enum AccountStatus {
  allowed
  forbidden
}

enum AccountOrderField {
  login
  createdAt
  updatedAt
}

enum TokenType {
  access
  refresh
}

"""
Accounts module queries
"""
type AccountsQuery {
  """
  Returns Your account data
  """
  me: Account!

  """
  Returns account data by ID
  """
  account(id: ID!): Account

  """
  Display list of all posible roles
  """
  rolesList: [String!]!

  """
  Check if passed login exists
  """
  checkLoginExists(login: String!, skipId: ID): Boolean!

  """
  Returns Accounts list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [AccountOrderBy!]
    filter: AccountListFilter
    search: AccountFilterSearch
  ): AccountListConnection!

  """
  Returns Account statuses list
  """
  statusesList: [AccountStatus!]!
}

"""
Account edge bundle
"""
type AccountsEdge implements Edge {
  node: Account!
  cursor: String!
}

"""
Possible data to filter list of accounts
"""
input AccountListFilter {
  status: [AccountStatus!]
}

"""
Account search filter
"""
input AccountFilterSearch {
  fields: [AccountFilterSearchField!]!

  """
  Search query string
  """
  query: String!
}

"""
Possible fields to search accounts
"""
enum AccountFilterSearchField {
  login
}

"""
Ordering options for accounts returned from the connection
"""
input AccountOrderBy {
  field: AccountOrderField!
  direction: OrderDirection!
}

"""
Accounts list bundle
"""
type AccountListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AccountsEdge!]!
}

type AccountsMutation {
  token(login: String!, password: String!): TokenRegistrationResponse!
}

type TokenRegistrationError implements Error {
  name: String!
  msg: String!
}

union TokenRegistrationResponse = TokenBag | TokenRegistrationError

type TokenBag {
  accessToken: AccessToken
  refreshToken: RefreshToken
}

type AccessToken {
  token: String!
  payload: AccessTokenPayload!
}

type RefreshToken {
  token: String!
  payload: RefreshTokenPayload!
}

type AccessTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [String!]!
  exp: Int!
  iss: String!
}

type RefreshTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [String!]!
  exp: Int!
  iss: String!
  associated: AccessToken!
}
