extend type Query {
  accounts: AccountsQuery!
  users: UsersQuery!
  authentification: AuthentificationQuery!

  """
  Service endpoint
  """
  permissions: PermissionsQuery!
}

extend type Mutation {
  accounts: AccountsMutation!
  authentification: AuthentificationMutation!
  permissions: PermissionsMutation!
}

type AuthentificationQuery {
  """
  Returns payload of your «Access» token
  """
  tokenPayload: AccessTokenPayload!

  """
  Verify your token
  """
  verifyToken(token: String!): TokenVerificationResponse!
}

type PermissionsQuery {
  permissionsMap: PermissionsMap!
}

type PermissionsMutation {
  updatePermissionsMap(id: ID! input: PermissionsMapInput): PermissionsMap!
}

input PermissionsMapInput {
  id: ID
  description: String
  map: JSON!
}

type PermissionsMap implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  map: JSONObject!
}

type TokenRegistrationError implements Error {
  name: String!
  msg: String!
}


type TokenVerificationError implements Error {
  name: String!
  msg: String!
}

union TokenRegistrationResponse = TokenBag | TokenRegistrationError
union TokenVerificationResponse = AccessTokenPayload | RefreshTokenPayload | TokenVerificationError

type TokenBag {
  accessToken: AccessToken
  refreshToken: RefreshToken
}

type AccessToken {
  token: String!
  payload: AccessTokenPayload!
}

type RefreshToken {
  token: String!
  payload: RefreshTokenPayload!
}

type AccessTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [String!]!
  exp: Int!
  iss: String!
}

type RefreshTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [String!]!
  exp: Int!
  iss: String!
  associated: AccessToken!
}

interface Profile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  deleted: Boolean!
}

type Account implements Node {
  id: ID!
  login: String!
  password: String!
  status: AccountStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [String!]!
  deleted: Boolean!
}

type MyAccount implements Node {
  id: ID!
  login: String!
  password: String!
  status: AccountStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [String!]!
}

type User implements Node & Profile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  deleted: Boolean!
  name: String!
  phones: [Phone!]
}

enum AccountStatus {
  allowed
  forbidden
}

enum AccountOrderField {
  login
  createdAt
  updatedAt
}

enum TokenType {
  access
  refresh
}

type UsersQuery {
  """
  Returns Users list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [UserOrderBy!]
    filter: UserListFilter
    search: UserFilterSearch
  ): UserListConnection!

  """
  Returns user if exists
  """
  user(id: ID!): User
}

"""
Accounts module queries
"""
type AccountsQuery {
  """
  Returns Your account
  """
  me: MyAccount!

  """
  Returns account if exists
  """
  account(id: ID!): Account

  """
  Display list of all posible roles
  """
  rolesList: [String!]!

  """
  Check if passed login exists
  """
  checkLoginExists(login: String!, skipId: ID): Boolean!

  """
  Returns Accounts list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [AccountOrderBy!]
    filter: AccountListFilter
    search: AccountFilterSearch
  ): AccountListConnection!

  """
  Returns Account statuses list
  """
  statusesList: [AccountStatus!]!
}

"""
Account edge bundle
"""
type AccountsEdge implements Edge {
  node: Account!
  cursor: String!
}

"""
Possible data to filter list of accounts
"""
input AccountListFilter {
  status: [AccountStatus!]
}

"""
Account search filter
"""
input AccountFilterSearch {
  fields: [AccountFilterSearchField!]!

  """
  Search query string
  """
  query: String!
}

"""
Possible fields to search accounts
"""
enum AccountFilterSearchField {
  login
}

"""
Ordering options for accounts returned from the connection
"""
input AccountOrderBy {
  field: AccountOrderField!
  direction: OrderDirection!
}

"""
Accounts list bundle
"""
type AccountListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AccountsEdge!]!
}

type AccountsMutation {
  update(id: ID!, input: AccountInput!): Account!
}

type AuthentificationMutation {
  """
  Pass your login and password to get «Access» and «Refresh» tokens pair
  """
  create(login: String!, password: String!): TokenRegistrationResponse!

  """
  Revoke Tokens by token ID or/and account ID
  """
  revoke(tokenID: ID accountID: ID): Boolean!
  """
  Pass your «Refresh» token to exchange it to new «Access» and «Refresh» tokens pair
  """
  refresh(refreshToken: String!): TokenRegistrationResponse!
}

input AccountInput {
  id: String
  login: String
  password: String
  status: AccountStatus
  createdAt: DateTime
  updatedAt: DateTime
  roles: [String!]
  deleted: Boolean
}


"""
User edge bundle
"""
type UsersEdge implements Edge {
  node: User!
  cursor: String!
}

"""
Possible data to filter list of users
"""
input UserListFilter {
  account: [ID!]
}

"""
User search filter
"""
input UserFilterSearch {
  fields: [UserFilterSearchField!]!

  """
  Search query string
  """
  query: String!
}


"""
Possible fields to search users
"""
enum UserFilterSearchField {
  name
}

"""
Ordering options for users returned from the connection
"""
input UserOrderBy {
  field: UserOrderField!
  direction: OrderDirection!
}

enum UserOrderField {
  name
  createdAt
  updatedAt
}

"""
Users list bundle
"""
type UserListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UsersEdge!]!
}

