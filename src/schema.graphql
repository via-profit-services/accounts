extend type Query {
  accounts: AccountsQuery!
  authentification: AuthentificationQuery!
}

extend type Mutation {
  accounts: AccountsMutation!
  authentification: AuthentificationMutation!
}

type AuthentificationQuery {
  """
  Returns payload of your «Access» token
  """
  tokenPayload: AccessTokenPayload!

  """
  Verify your token
  """
  verifyToken(token: String!): TokenVerificationResponse!
}

enum AccountRole {
  developer
  administrator
  viewer
}


type TokenRegistrationError implements Error {
  name: String!
  msg: String!
}


type TokenVerificationError implements Error {
  name: String!
  msg: String!
}

type ResetPasswordError implements Error {
  name: String!
  msg: String!
}

type ResetPasswordSuccess {
  msg: String!
  phones: [String!]!
}


union TokenRegistrationResponse = TokenBag | TokenRegistrationError
union TokenVerificationResponse = AccessTokenPayload | RefreshTokenPayload | TokenVerificationError
union ResetPasswordResponse = ResetPasswordSuccess | ResetPasswordError

type TokenBag {
  accessToken: AccessToken!
  refreshToken: RefreshToken!
}

type AccessToken {
  token: String!
  payload: AccessTokenPayload!
}

type RefreshToken {
  token: String!
  payload: RefreshTokenPayload!
}

type AccessTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [AccountRole!]!
  exp: Int!
  iss: String!
}

type RefreshTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [AccountRole!]!
  exp: Int!
  iss: String!
  associated: AccessToken!
}

type Account implements Node {
  id: ID!
  login: String!
  password: String!
  status: AccountStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [AccountRole!]!
  recoveryPhones: [Phone!]
  deleted: Boolean!
  entity: AccountEntity!
  type: AccountType!
}


enum AccountStatus {
  allowed
  forbidden
}

enum AccountOrderField {
  login
  type
  name
  createdAt
  updatedAt
}

enum TokenType {
  access
  refresh
}


"""
Accounts module queries
"""
type AccountsQuery {
  """
  Returns Your account
  """
  me: Account!

  """
  Returns account if exists
  """
  account(id: ID!): Account

  """
  Check if passed login exists
  """
  checkLoginExists(login: String!, skipId: ID): Boolean!

  """
  Returns Accounts list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [AccountOrderBy!]
    filter: AccountListFilter
    search: [AccountFilterSearch!]
  ): AccountListConnection!

  """
  Returns Account statuses list
  """
  statusesList: [AccountStatus!]!
}

"""
Account edge bundle
"""
type AccountsEdge implements Edge {
  node: Account!
  cursor: String!
}

"""
Possible data to filter list of accounts
"""
input AccountListFilter {
  status: [AccountStatus!]
  type: [AccountType!]
}

"""
Account search filter
"""
input AccountFilterSearch {
  field: AccountFilterSearchField!

  """
  Search query string
  """
  query: String!
}

"""
Possible fields to search accounts
"""
enum AccountFilterSearchField {
  login
}

"""
Ordering options for accounts returned from the connection
"""
input AccountOrderBy {
  field: AccountOrderField!
  direction: OrderDirection!
}

"""
Accounts list bundle
"""
type AccountListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AccountsEdge!]!
}


type AccountsMutation {
  """
  Create new account
  """
  create(input: AccountInputCreate!): Account!
  
  """
  Update exists account data
  """
  update(id: ID!, input: AccountInputUpdate!): Account!

  """
  Delete account
  """
  delete(id: ID ids: [ID!]): DeleteAccountResult!
}


type DeleteAccountResult {
  deletedAccounts: [ID!]!
}


type AuthentificationMutation {
  """
  Pass your login and password to get «Access» and «Refresh» tokens pair
  """
  create(login: String!, password: String!): TokenRegistrationResponse!

  """
  Revoke Tokens by token ID or/and account ID
  """
  revoke(tokenID: ID accountID: ID): Void!
  """
  Pass your «Refresh» token to exchange it to new «Access» and «Refresh» tokens pair
  """
  refresh(refreshToken: String!): TokenRegistrationResponse!

  """
  A new password will be generated and an SMS will be sent to the phone numbers that are specified as Recovery
  """
  reset(login: String!): ResetPasswordResponse!
}

input AccountInputUpdate {
  id: String
  login: String
  password: String
  status: AccountStatus
  roles: [AccountRole!]
  type: AccountType
  entity: String
  """
  Phones list for password recovery
  """
  recoveryPhones: [AccountRecoveryPhoneInputUpdate!]
}

input AccountInputCreate {
  id: String
  login: String!
  password: String!
  roles: [AccountRole!]!
  type: AccountType!
  entity: String!
  """
  Phones list for password recovery
  """
  recoveryPhones: [AccountRecoveryPhoneInputCreate!]
}

input AccountRecoveryPhoneInputCreate {
  id: ID
  country: PhoneCountry!
  number: String!
  primary: Boolean!
  confirmed: Boolean
}

input AccountRecoveryPhoneInputUpdate {
  id: ID!
  country: PhoneCountry
  number: String
  primary: Boolean
  confirmed: Boolean
}